function Add-JobSchedulerOrder
{
<#
.SYNOPSIS
Adds an order to a job chain in the JobScheduler Master.

.DESCRIPTION
Creates a temporary ad hoc order for execution with the specified job chain

.PARAMETER JobChain
Specifies the path and name of a job chain for which orders should be added.

.PARAMETER Order
Optionally specifies the identifier of an order.

.PARAMETER Parameters
Specifies the parameters for the order. Parameters are created from a hashmap,
i.e. a list of names and values.

.PARAMETER Title
Specifies the title of the order.

.PARAMETER At
Specifies the point in time when the order should start:

* now
** specifies that the order should start immediately
* now+1800
** specifies that the order should start with a delay of 1800 seconds, i.e. 30 minutes later.
* yyyy-mm-dd HH:MM[:SS]
** specifies that the order should start at the specified point in time.

.PARAMETER State
Specifies that the order should enter the job chain at the job chain node that
is assigend the specified state.

.PARAMETER EndState
Specifies that the order should leave the job chain at the job chain node that
is assigend the specified state.

.PARAMETER Replace
Specifies that the order should replace an existing order with the same order identification.

.PARAMETER Immediate
Specifies that the order is immediately submitted and that the order identification is returned 
with the order object. This parameter is intended for a situation when no order identification
is provided when executing the cmdlet and when the caller wants to receive with the order object
the order identification that has been created by JobScheduler.

.INPUTS
This cmdlet accepts pipelined order objects that are e.g. returned from a Get-Order cmdlet.

.OUTPUTS
This cmdlet returns an array of order objects.

.EXAMPLE
Add-Order -JobChain /sos/reporting/Reporting

Adds an order to the specified job chain. The order identification is generated by the JobScheduler Master.

.EXAMPLE
Add-Order -Order 123 -JobChain /sos/reporting/Reporting

Adds the order "123" to the specified job chain.

.EXAMPLE
Add-Order -Order 123 -JobChain /sos/reporting/Reporting -At "now+1800" -Replace

Adds the specified order. Should the order exist then it will be replaced.

.EXAMPLE
Add-Order -JobChain /sos/reporting/Reporting -At "now+3600" -Parameters @{'param1'='value1'; 'param2'='value2'}

Adds an order to the specified job chain. The order will start one hour later and will use the
parameters from the specified hashmap.

.LINK
about_jobscheduler

#>
[cmdletbinding()]
param
(
    [Parameter(Mandatory=$True,ValueFromPipeline=$True,ValueFromPipelinebyPropertyName=$True)]
    [string] $JobChain,
    [Parameter(Mandatory=$False,ValueFromPipeline=$False,ValueFromPipelinebyPropertyName=$True)]
    [string] $Order,
    [Parameter(Mandatory=$False,ValueFromPipeline=$False,ValueFromPipelinebyPropertyName=$True)]
    [hashtable] $Parameters,
    [Parameter(Mandatory=$False,ValueFromPipeline=$False,ValueFromPipelinebyPropertyName=$False)]
    [string] $Title,
    [Parameter(Mandatory=$False,ValueFromPipeline=$False,ValueFromPipelinebyPropertyName=$False)]
    [string] $At = 'now',
    [Parameter(Mandatory=$False,ValueFromPipeline=$False,ValueFromPipelinebyPropertyName=$False)]
    [string] $State,
    [Parameter(Mandatory=$False,ValueFromPipeline=$False,ValueFromPipelinebyPropertyName=$False)]
    [string] $EndState,
    [Parameter(Mandatory=$False,ValueFromPipeline=$False,ValueFromPipelinebyPropertyName=$False)]
    [switch] $Replace,
    [Parameter(Mandatory=$False,ValueFromPipeline=$False,ValueFromPipelinebyPropertyName=$False)]
    [switch] $Immediate
)
    Begin
    {
        Approve-JobSchedulerCommand $MyInvocation.MyCommand

        $command = ''
        $orderCount = 0
    }
    
    Process
    {
        $orderAttributes = ''

        if ( $Immediate )
        {
            $command = ''
        }

        if ( $Order )
        {
            $orderAttributes += " id='$($Order)'"
        }
        
        if ( $Title )
        {
            $orderAttributes += " title='$($Title)'"
        }
        
        if ( $At )
        {
            $orderAttributes += " at='$($At)'"
        }
        
        if ( $State )
        {
            $orderAttributes += " state='$($State)'"
        }
        
        if ( $EndState )
        {
            $orderAttributes += " end_state='$($EndState)'"
        }
        
        if ( $Replace )
        {
            $orderAttributes += " replace='yes'"
        } else {
            $orderAttributes += " replace='no'"
        }
        
        $command += "<add_order job_chain='$($JobChain)' $($orderAttributes)>"

        if ( $Parameters )
        {
            $command += '<params>'
            foreach ($p in $Parameters.GetEnumerator()) {
                $command += "<param name='$($p.Name)' value='$($p.Value)'/>"
            }            
            $command += '</params>'
        }
        
        $command += "</add_order>"

        $o = Create-OrderObject
        $o.Order = $Order
        $o.JobChain = $JobChain
        $o.Title = $Title
        $o.State = $State
        
        if ( $Immediate )
        {
            Write-Debug ".. $($MyInvocation.MyCommand.Name): sending command to $($js.Url): $command"
            $addOrderXml = Send-JobSchedulerXMLCommand $js.Url $command
            $o.Order = $addOrderXml.spooler.answer.ok.order.order
        }
        
        $o
        $orderCount++
    }

    End
    {
        if ( $orderCount )
        {
            if ( $Immediate )
            {
                Write-Verbose ".. $($MyInvocation.MyCommand.Name): $($orderCount) orders added"                
            } else {
                Write-Verbose ".. $($MyInvocation.MyCommand.Name): $($orderCount) orders are requested to be added"
                $command = "<commands>$($command)</commands>"
                Write-Debug ".. $($MyInvocation.MyCommand.Name): sending command to $($js.Url): $command"
                $addOrderXml = Send-JobSchedulerXMLCommand $js.Url $command
            }
        } else {
            Write-Warning "$($MyInvocation.MyCommand.Name): no order found to add"
        }
    }
}

Set-Alias -Name Add-Order -Value Add-JobSchedulerOrder
